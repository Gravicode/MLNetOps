
// This file was auto-generated by ML.NET Model Builder. 

using System;
using WebML.Shared;

namespace TrainingML
{
    class Program
    {
        static void Main(string[] args)
        {
            TrainingModel(args);
            
            //TestPrediction();
        }

        static void TrainingModel(string[] args)
        {
            if (args.Length > 0)
            {
                string FolderTarget = args[0];
                string ModelFolder = string.Empty;
                if (args.Length > 1)
                    ModelFolder = args[1];
                if (Directory.Exists(FolderTarget))
                {
                    var files = Directory.GetFiles(FolderTarget, "*.csv");
                    foreach (var file in files)
                    {
                        var res = MPG.DoAutoML(file);
                        if (res.IsSuccess)
                        {
                            ConsoleHelper.PrintRegressionMetrics("hasil", res.Result.ValidationMetrics);
                            Console.WriteLine($"Training Completed @ {DateTime.Now.ToString()}");
                            Console.WriteLine($"Model Saved => {res.ModelPath}");
                            File.Delete(file);

                            if (!string.IsNullOrEmpty(ModelFolder))
                            {
                                if (!Directory.Exists(ModelFolder))
                                {
                                    Directory.CreateDirectory(ModelFolder);
                                }
                                var newModelPath = Path.Combine(ModelFolder, Path.GetFileName(file));
                                File.Move(res.ModelPath, newModelPath);
                                Console.WriteLine($"New Model Path => {newModelPath}");
                            }
                        }
                        else
                        {
                            Console.WriteLine($"Cannot process file: {file}");
                            Console.WriteLine($"reason: {res.Message}");
                        }

                    }
                }
            }
            else
            {
                Console.WriteLine("Please specify data folder: TrainingML.exe \"Model.csv\" \"c:/model dir/\"");
            }

        }
        static void TestPrediction()
        {
            // Create single instance of sample data from first line of dataset for model input
            MPG.ModelInput sampleData = new MPG.ModelInput()
            {
                Cylinders = 8F,
                Displacement = 307F,
                Horsepower = 130F,
                Weight = @"3504.",
                Acceleration = 12F,
                Model_year = 70F,
                Origin = 1F,
                Car_name = @"chevrolet chevelle malibu",
            };

            // Make a single prediction on the sample data and print results
            var predictionResult = MPG.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Mpg with predicted Mpg from sample data...\n\n");


            Console.WriteLine($"Mpg: {18F}");
            Console.WriteLine($"Cylinders: {8F}");
            Console.WriteLine($"Displacement: {307F}");
            Console.WriteLine($"Horsepower: {130F}");
            Console.WriteLine($"Weight: {@"3504."}");
            Console.WriteLine($"Acceleration: {12F}");
            Console.WriteLine($"Model_year: {70F}");
            Console.WriteLine($"Origin: {1F}");
            Console.WriteLine($"Car_name: {@"chevrolet chevelle malibu"}");


            Console.WriteLine($"\n\nPredicted Mpg: {predictionResult.Score}\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }
    }
}
