// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Microsoft.ML.AutoML;

namespace WebML.Shared
{
    public class MPG
    {
        /// <summary>
        /// model input class for MPG.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(0)]
            //[ColumnName(@"mpg")]
            public float Mpg { get; set; }

            [LoadColumn(1)]
            //[ColumnName(@"cylinders")]
            public float Cylinders { get; set; }

            [LoadColumn(2)]
            //[ColumnName(@"displacement")]
            public float Displacement { get; set; }

            [LoadColumn(3)]
            //[ColumnName(@"horsepower")]
            public float Horsepower { get; set; }
            [LoadColumn(4)]

            //[ColumnName(@"weight")]
            public string Weight { get; set; }
            [LoadColumn(5)]
            //[ColumnName(@"acceleration")]
            public float Acceleration { get; set; }
            [LoadColumn(6)]
            //[ColumnName(@"model year")]
            public float Model_year { get; set; }

            [LoadColumn(7)]
            //[ColumnName(@"origin")]
            public float Origin { get; set; }

            [LoadColumn(8)]
            //[ColumnName(@"car name")]
            public string Car_name { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MPG.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            public float Score { get; set; }
        }
        #endregion

        private static string MLNetModelPath = Path.GetFullPath("MPG.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new[] { new InputOutputColumnPair(@"cylinders", @"cylinders"), new InputOutputColumnPair(@"displacement", @"displacement"), new InputOutputColumnPair(@"horsepower", @"horsepower"), new InputOutputColumnPair(@"acceleration", @"acceleration"), new InputOutputColumnPair(@"model year", @"model year"), new InputOutputColumnPair(@"origin", @"origin") })
                                    .Append(mlContext.Transforms.Text.FeaturizeText(@"weight", @"weight"))
                                    .Append(mlContext.Transforms.Text.FeaturizeText(@"car name", @"car name"))
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new[] { @"cylinders", @"displacement", @"horsepower", @"acceleration", @"model year", @"origin", @"weight", @"car name" }))
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))
                                    .Append(mlContext.Regression.Trainers.LbfgsPoissonRegression(l1Regularization: 343.998015010068F, l2Regularization: 0.03125F, labelColumnName: @"mpg", featureColumnName: @"Features"));

            return pipeline;
        }

        public static TrainingModelInfo DoAutoML(string TrainDataPath= @"D:\experiment\MLOps\Dataset\auto-mpg.csv", CancellationTokenSource? cts = null)
        {
            var info = new TrainingModelInfo();
            try
            {
                var experimentSettings = new RegressionExperimentSettings();
                experimentSettings.MaxExperimentTimeInSeconds = 60;
                if (cts != null)
                    experimentSettings.CancellationToken = cts.Token;


                experimentSettings.OptimizingMetric = RegressionMetric.MeanSquaredError;
                var mlContext = new MLContext();
                RegressionExperiment experiment = mlContext.Auto().CreateRegressionExperiment(experimentSettings);
                RegressionExperimentProgressHandler handler = new RegressionExperimentProgressHandler();
                
                IDataView trainingDataView = mlContext.Data.LoadFromTextFile<ModelInput>(TrainDataPath, separatorChar:',' , hasHeader: true);

                ExperimentResult<RegressionMetrics> experimentResult = experiment.Execute(trainingDataView, @"Mpg", progressHandler: handler);

                mlContext.Model.Save(experimentResult.BestRun.Model, trainingDataView.Schema, MLNetModelPath);

                info = new TrainingModelInfo() { ModelPath = MLNetModelPath, IsSuccess = true, Result = experimentResult.BestRun };


            }catch(Exception ex)
            {
                info.IsSuccess = false;
                info.Message = ex.Message;
            }
            return info; 
        }
    }

    public class TrainingModelInfo
    {
        public string Message { get; set; }
        public RunDetail<Microsoft.ML.Data.RegressionMetrics> Result { get; set; }
        public bool IsSuccess { get; set; }
        public string ModelPath { get; set; }
    }

    /// <summary>
    /// Progress handler that AutoML will invoke after each model it produces and evaluates.
    /// </summary>
    public class RegressionExperimentProgressHandler : IProgress<RunDetail<RegressionMetrics>>
    {
        private int _iterationIndex;

        public void Report(RunDetail<RegressionMetrics> iterationResult)
        {
            if (_iterationIndex++ == 0)
            {
                ConsoleHelper.PrintRegressionMetricsHeader();
            }

            if (iterationResult.Exception != null)
            {
                ConsoleHelper.PrintIterationException(iterationResult.Exception);
            }
            else
            {
                ConsoleHelper.PrintIterationMetrics(_iterationIndex, iterationResult.TrainerName,
                    iterationResult.ValidationMetrics, iterationResult.RuntimeInSeconds);
            }
        }
    }

}
